// This file has been autogenerated from a class added in the UI designer.

using System;
using Foundation;
using Plugin.Media;
using test3.DataSource;
using test3.Interface;
using test3.Models;
using UIKit;

namespace test3
{
	public partial class AddBookViewController : UIViewController
	{
        IBooks myBooks;
		public AddBookViewController (IntPtr handle) : base (handle)
		{
            myBooks = new BookLocalDatabase();
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            SaveButton.Enabled = false;

            NameText.ShouldReturn = (textField) =>
            {
                textField.ResignFirstResponder();
                return true;
            };

            AuthorText.ShouldReturn = (textField) =>
            {
                textField.ResignFirstResponder();
                return true;
            };

            NameText.EditingChanged += (sender, args) =>
            {
                SaveButton.Enabled = true;
            };

            AuthorText.EditingChanged += (sender, args) =>
            {
                SaveButton.Enabled = true;
            };

            SaveButton.Clicked += SaveButton_Clicked;

            BookImage.UserInteractionEnabled = true;
            UITapGestureRecognizer tapGesture = new UITapGestureRecognizer(TapImageAsync);
            tapGesture.NumberOfTapsRequired = 1;
            BookImage.AddGestureRecognizer(tapGesture);

        }

        private async void TapImageAsync(UITapGestureRecognizer tap)
        {
            Console.WriteLine("You tap on the image view");
            await CrossMedia.Current.Initialize();
            try
            {
                if (!CrossMedia.Current.IsCameraAvailable || !CrossMedia.Current.IsTakePhotoSupported)
                {
                    Console.WriteLine("No camera available");
                    return;
                }

                var photo = await CrossMedia.Current.TakePhotoAsync(
                    new Plugin.Media.Abstractions.StoreCameraMediaOptions()
                    {
                        DefaultCamera = Plugin.Media.Abstractions.CameraDevice.Rear,
                        Directory = "Book",
                        Name="book.jpg",
                        SaveToAlbum = true,

                    });

                if (photo == null) { return;  }

                Console.WriteLine("Photo Location : " + photo.Path);

                if (photo != null)
                {
                  
                }

            }catch(Exception ex)
            {
                Console.WriteLine("Error Take Book Picture " + ex.Message);
            }
        }

        public override void TouchesBegan(NSSet touches, UIEvent evt)
        {
            base.TouchesBegan(touches, evt);
            this.View.EndEditing(true);
        }

        void SaveButton_Clicked(object sender, EventArgs e)
        {
            myBooks.AddBook(new BookModel()
            {
                Author = AuthorText.Text,
                Name = NameText.Text
            });
            NavigationController.PopToRootViewController(true);
        }

            
    }
}
